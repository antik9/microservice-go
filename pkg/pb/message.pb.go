// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pkg/pb/message.proto

package pb

import (
	context "context"
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	timestamp "github.com/golang/protobuf/ptypes/timestamp"
	grpc "google.golang.org/grpc"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Event_Type int32

const (
	Event_MEETING  Event_Type = 0
	Event_REMINDER Event_Type = 1
	Event_OTHER    Event_Type = 2
)

var Event_Type_name = map[int32]string{
	0: "MEETING",
	1: "REMINDER",
	2: "OTHER",
}

var Event_Type_value = map[string]int32{
	"MEETING":  0,
	"REMINDER": 1,
	"OTHER":    2,
}

func (x Event_Type) String() string {
	return proto.EnumName(Event_Type_name, int32(x))
}

func (Event_Type) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_eefb5639077cfe21, []int{0, 0}
}

type Event struct {
	Name                 string               `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	Beginning            *timestamp.Timestamp `protobuf:"bytes,2,opt,name=beginning,proto3" json:"beginning,omitempty"`
	End                  *timestamp.Timestamp `protobuf:"bytes,3,opt,name=end,proto3" json:"end,omitempty"`
	EventType            Event_Type           `protobuf:"varint,4,opt,name=eventType,proto3,enum=pb.Event_Type" json:"eventType,omitempty"`
	XXX_NoUnkeyedLiteral struct{}             `json:"-"`
	XXX_unrecognized     []byte               `json:"-"`
	XXX_sizecache        int32                `json:"-"`
}

func (m *Event) Reset()         { *m = Event{} }
func (m *Event) String() string { return proto.CompactTextString(m) }
func (*Event) ProtoMessage()    {}
func (*Event) Descriptor() ([]byte, []int) {
	return fileDescriptor_eefb5639077cfe21, []int{0}
}

func (m *Event) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Event.Unmarshal(m, b)
}
func (m *Event) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Event.Marshal(b, m, deterministic)
}
func (m *Event) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Event.Merge(m, src)
}
func (m *Event) XXX_Size() int {
	return xxx_messageInfo_Event.Size(m)
}
func (m *Event) XXX_DiscardUnknown() {
	xxx_messageInfo_Event.DiscardUnknown(m)
}

var xxx_messageInfo_Event proto.InternalMessageInfo

func (m *Event) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Event) GetBeginning() *timestamp.Timestamp {
	if m != nil {
		return m.Beginning
	}
	return nil
}

func (m *Event) GetEnd() *timestamp.Timestamp {
	if m != nil {
		return m.End
	}
	return nil
}

func (m *Event) GetEventType() Event_Type {
	if m != nil {
		return m.EventType
	}
	return Event_MEETING
}

type Empty struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Empty) Reset()         { *m = Empty{} }
func (m *Empty) String() string { return proto.CompactTextString(m) }
func (*Empty) ProtoMessage()    {}
func (*Empty) Descriptor() ([]byte, []int) {
	return fileDescriptor_eefb5639077cfe21, []int{1}
}

func (m *Empty) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Empty.Unmarshal(m, b)
}
func (m *Empty) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Empty.Marshal(b, m, deterministic)
}
func (m *Empty) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Empty.Merge(m, src)
}
func (m *Empty) XXX_Size() int {
	return xxx_messageInfo_Empty.Size(m)
}
func (m *Empty) XXX_DiscardUnknown() {
	xxx_messageInfo_Empty.DiscardUnknown(m)
}

var xxx_messageInfo_Empty proto.InternalMessageInfo

type Response struct {
	Resp                 string   `protobuf:"bytes,1,opt,name=resp,proto3" json:"resp,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_eefb5639077cfe21, []int{2}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetResp() string {
	if m != nil {
		return m.Resp
	}
	return ""
}

func init() {
	proto.RegisterEnum("pb.Event_Type", Event_Type_name, Event_Type_value)
	proto.RegisterType((*Event)(nil), "pb.Event")
	proto.RegisterType((*Empty)(nil), "pb.Empty")
	proto.RegisterType((*Response)(nil), "pb.Response")
}

func init() { proto.RegisterFile("pkg/pb/message.proto", fileDescriptor_eefb5639077cfe21) }

var fileDescriptor_eefb5639077cfe21 = []byte{
	// 316 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x90, 0xcd, 0x4a, 0xc3, 0x40,
	0x14, 0x85, 0x3b, 0xfd, 0xb1, 0xc9, 0x6d, 0x29, 0xe5, 0xe2, 0x22, 0x64, 0xa1, 0x25, 0x20, 0x74,
	0x51, 0x26, 0x50, 0x37, 0x6e, 0x0b, 0x0e, 0xda, 0x45, 0xab, 0x8c, 0xf1, 0x01, 0x12, 0x73, 0x0d,
	0xc1, 0x66, 0x32, 0x24, 0x63, 0xa1, 0x4f, 0xe4, 0x63, 0xf9, 0x2a, 0x32, 0x09, 0xb1, 0xcb, 0xae,
	0xe6, 0x70, 0xe7, 0x9b, 0x33, 0xe7, 0x1e, 0xb8, 0xd6, 0x5f, 0x59, 0xa8, 0x93, 0xb0, 0xa0, 0xba,
	0x8e, 0x33, 0xe2, 0xba, 0x2a, 0x4d, 0x89, 0x7d, 0x9d, 0xf8, 0xb7, 0x59, 0x59, 0x66, 0x07, 0x0a,
	0x9b, 0x49, 0xf2, 0xfd, 0x19, 0x9a, 0xbc, 0xa0, 0xda, 0xc4, 0x85, 0x6e, 0xa1, 0xe0, 0x97, 0xc1,
	0x48, 0x1c, 0x49, 0x19, 0x44, 0x18, 0xaa, 0xb8, 0x20, 0x8f, 0x2d, 0xd8, 0xd2, 0x95, 0x8d, 0xc6,
	0x07, 0x70, 0x13, 0xca, 0x72, 0xa5, 0x72, 0x95, 0x79, 0xfd, 0x05, 0x5b, 0x4e, 0xd6, 0x3e, 0x6f,
	0x2d, 0x79, 0x67, 0xc9, 0xa3, 0xce, 0x52, 0x9e, 0x61, 0x5c, 0xc1, 0x80, 0x54, 0xea, 0x0d, 0x2e,
	0xbe, 0xb1, 0x18, 0xae, 0xc0, 0x25, 0x1b, 0x22, 0x3a, 0x69, 0xf2, 0x86, 0x0b, 0xb6, 0x9c, 0xad,
	0x67, 0x5c, 0x27, 0xbc, 0x49, 0xc6, 0xed, 0x54, 0x9e, 0x81, 0x60, 0x05, 0x43, 0x7b, 0xe2, 0x04,
	0xc6, 0x3b, 0x21, 0xa2, 0xed, 0xfe, 0x69, 0xde, 0xc3, 0x29, 0x38, 0x52, 0xec, 0xb6, 0xfb, 0x47,
	0x21, 0xe7, 0x0c, 0x5d, 0x18, 0xbd, 0x44, 0xcf, 0x42, 0xce, 0xfb, 0xc1, 0x18, 0x46, 0xa2, 0xd0,
	0xe6, 0x14, 0xdc, 0x80, 0x23, 0xa9, 0xd6, 0xa5, 0xaa, 0xc9, 0x2e, 0x5b, 0x51, 0xad, 0xbb, 0x65,
	0xad, 0x5e, 0xff, 0x30, 0x98, 0x36, 0x1f, 0xbe, 0x51, 0x75, 0xcc, 0x3f, 0x08, 0x03, 0x70, 0x36,
	0x69, 0xda, 0xb6, 0xe3, 0xfe, 0xc7, 0xf1, 0x5b, 0xd9, 0x58, 0xf6, 0xf0, 0x0e, 0x26, 0x92, 0x8a,
	0xf2, 0x48, 0x17, 0xb1, 0x77, 0x9d, 0xc6, 0xe6, 0x22, 0xe6, 0xbc, 0x56, 0xb9, 0x32, 0x9b, 0xc3,
	0x01, 0xcf, 0x17, 0xfe, 0xd4, 0xca, 0x2e, 0x7b, 0xd0, 0x4b, 0xae, 0x9a, 0x1e, 0xef, 0xff, 0x02,
	0x00, 0x00, 0xff, 0xff, 0x69, 0x98, 0xc7, 0xbe, 0xf8, 0x01, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// EventServiceClient is the client API for EventService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type EventServiceClient interface {
	AddEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Empty, error)
	RemoveEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Empty, error)
	UpdateEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Empty, error)
	PrintAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Response, error)
}

type eventServiceClient struct {
	cc *grpc.ClientConn
}

func NewEventServiceClient(cc *grpc.ClientConn) EventServiceClient {
	return &eventServiceClient{cc}
}

func (c *eventServiceClient) AddEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.EventService/AddEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) RemoveEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.EventService/RemoveEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) UpdateEvent(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/pb.EventService/UpdateEvent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *eventServiceClient) PrintAll(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.EventService/PrintAll", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// EventServiceServer is the server API for EventService service.
type EventServiceServer interface {
	AddEvent(context.Context, *Event) (*Empty, error)
	RemoveEvent(context.Context, *Event) (*Empty, error)
	UpdateEvent(context.Context, *Event) (*Empty, error)
	PrintAll(context.Context, *Empty) (*Response, error)
}

func RegisterEventServiceServer(s *grpc.Server, srv EventServiceServer) {
	s.RegisterService(&_EventService_serviceDesc, srv)
}

func _EventService_AddEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).AddEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.EventService/AddEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).AddEvent(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_RemoveEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).RemoveEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.EventService/RemoveEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).RemoveEvent(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_UpdateEvent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).UpdateEvent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.EventService/UpdateEvent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).UpdateEvent(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

func _EventService_PrintAll_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(EventServiceServer).PrintAll(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.EventService/PrintAll",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(EventServiceServer).PrintAll(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _EventService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.EventService",
	HandlerType: (*EventServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddEvent",
			Handler:    _EventService_AddEvent_Handler,
		},
		{
			MethodName: "RemoveEvent",
			Handler:    _EventService_RemoveEvent_Handler,
		},
		{
			MethodName: "UpdateEvent",
			Handler:    _EventService_UpdateEvent_Handler,
		},
		{
			MethodName: "PrintAll",
			Handler:    _EventService_PrintAll_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pkg/pb/message.proto",
}
